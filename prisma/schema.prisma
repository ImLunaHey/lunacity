// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pageId       String?
  page         Page?     @relation(fields: [pageId], references: [id], onDelete: Cascade)
}

model Page {
  id            String       @id @default(uuid())
  handle        String       @unique
  name          String
  ownerId       String
  owner         User         @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  followerCount Int          @default(0)
  posts         Post[]
  infractions   Infraction[]
  official      Boolean      @default(false)
  followedBy    Follows[]    @relation("following")
  following     Follows[]    @relation("follower")
  description   String       @default("")
  Session       Session[]
}

model Infraction {
  id             String   @id @default(uuid())
  pageId         String
  page           Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  startTimestamp DateTime @default(now())
  endTimestamp   DateTime
  reason         String
  severity       String
}

model Follows {
  follower    Page   @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   Page   @relation("following", fields: [followingId], references: [id])
  followingId String

  @@id([followerId, followingId])
}

model Tag {
  id    String @id @default(uuid())
  name  String @unique
  posts Post[]
}

model Post {
  id     String @id @default(uuid())
  type   String
  body   String
  pageId String
  page   Page   @relation(fields: [pageId], references: [id], onDelete: Cascade)
  tags   Tag[]
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  pages         Page[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
