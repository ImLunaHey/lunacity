// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String               @id @default(cuid())
  handle        String?              @unique
  email         String?              @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  reports       Report[]
  notifications Notification[]
  pagesFollowed PageFollowedByUser[]

  // Has this User been deactivated
  deactivatedTimestamp DateTime?

  // The user's own page
  pageId String?
  page   Page?   @relation("userPage")

  // The pages a user is a moderator of
  moderatorOf Page[]

  // All the pages the user has created
  pagesCreated Page[] @relation("pageOwner")
}

enum ProtectionType {
  MASS_REPORTING
}

model Protection {
  id   String         @id @default(cuid())
  type ProtectionType

  // When the protection starts
  startTimestamp DateTime @default(now())

  // When the protection ends
  endTimestamp DateTime

  // The page this protection applies to
  pageId String
  page   Page   @relation(fields: [pageId], references: [id])
}

model Page {
  id             String               @id @default(cuid())
  handle         String               @unique
  displayName    String
  followerCount  Int                  @default(0)
  posts          Post[]
  infractions    Infractions[]
  official       Boolean              @default(false)
  description    String               @default("")
  followedBy     Follows[]            @relation("following")
  following      Follows[]            @relation("follower")
  usersFollowing PageFollowedByUser[]

  // Has this Page been deactivated
  deactivatedTimestamp DateTime?

  // To what level is this page protected from reports?
  protection Protection[]

  // Who owns the page
  ownerId String
  owner   User   @relation("pageOwner", fields: [ownerId], references: [id])

  // The moderators of the page
  moderators User[]

  // If this is a user page this will exist
  userId String? @unique
  user   User?   @relation("userPage", fields: [userId], references: [id])

  // Reports towards this page
  reports Report[]

  // Messages threads this page is currently in
  messageThreads MessageThread[]

  // Extra junk connections
  NotificationData NotificationData[]
  Message          Message[]
}

enum InfractionSeverity {
  WARNING
  BAN
}

model Infractions {
  id             String             @id @default(cuid())
  pageId         String
  page           Page               @relation(fields: [pageId], references: [id], onDelete: Cascade)
  startTimestamp DateTime           @default(now())
  endTimestamp   DateTime
  reason         ReportReason
  severity       InfractionSeverity
}

model Follows {
  // The page who is following
  followerId String
  follower   Page   @relation("follower", fields: [followerId], references: [id])

  // Page they're following
  followingId String
  following   Page   @relation("following", fields: [followingId], references: [id])

  createdAt DateTime @default(now())

  @@id([followerId, followingId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

enum ReportReason {
  SPAM // bot spam
  ABUSE // Hate speech
  ILLEGAL // selling drugs
  HELP // Self harm
  UNDERAGE // The poster is underage
  UNLABELLED_BOT // A bot account that isnt marked as such
  MISINFORMATION // Intentional misinformation (not satire)
  CUSTOM // This should also have a customReason on the associated Report
}

model Report {
  id String @id @default(cuid())

  // The person reporting this post
  reporter   User   @relation(fields: [reporterId], references: [id])
  reporterId String

  // Why they're reporting this
  reason       ReportReason
  // If reason is CUSTOM this should be the free form text
  customReason String?

  // The post being reported
  post   Post?   @relation(fields: [postId], references: [id])
  postId String?

  // The comment being reported
  comment   Comment? @relation(fields: [commentId], references: [id])
  commentId String?

  // The page being reported
  page   Page?   @relation(fields: [pageId], references: [id])
  pageId String?
}

model Media {
  id String @id @default(cuid())

  postId String
  Post   Post   @relation(fields: [postId], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

enum CommunityLabel {
  EVERYONE // SFW or educational @default
  SEX // talks about sex in a non-educational manner
  DRUGS // talks about drugs in a non-educational manner
  VIOLENCE // talks about violence in a non-educational manner
}

model Post {
  id     String  @id @default(cuid())
  type   String
  title  String
  body   String
  media  Media[]
  pageId String
  page   Page    @relation(fields: [pageId], references: [id], onDelete: Cascade)
  tags   Tag[]

  reports Report[]

  communityLabel CommunityLabel @default(EVERYONE)

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  reactions        PostReaction[]
  comments         Comment[]
  NotificationData NotificationData[]
}

model PostReaction {
  id String @id @default(cuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id])
}

model Comment {
  id String @id @default(cuid())

  postId String
  post   Post   @relation(fields: [postId], references: [id])

  reports Report[]

  reactions        CommentReaction[]
  NotificationData NotificationData[]
}

model CommentReaction {
  id String @id @default(cuid())

  commentId String
  Comment   Comment @relation(fields: [commentId], references: [id])
}

model PageFollowedByUser {
  id String @id @default(cuid())

  page   Page   @relation(fields: [pageId], references: [id])
  user   User   @relation(fields: [userId], references: [id])
  pageId String
  userId String
}

// A(User) [follow] -> B()
// B(User) [follow_back] -> A
// A(User) [comment] -> B(Post/Comment)
// A(User) [like] -> B(Post/Comment)

enum NotificationType {
  FOLLOWED
  FOLLOWED_BACK
  POSTED_COMMENTED_ON
  POST_LIKED
  COMMENT_LIKED
}

model Notification {
  id String @id @default(cuid())

  // What type of notification this is
  type NotificationType

  // Has this been read
  read Boolean @default(false)

  // Who got the notification
  notifiedId String? @map("notified")
  notified   User?   @relation(fields: [notifiedId], references: [id])

  // The associated data for this notification
  data NotificationData?
}

model NotificationData {
  id String @id @default(cuid())

  // The notification this data belongs to
  notificationId String       @unique
  notification   Notification @relation(fields: [notificationId], references: [id], onDelete: Cascade)

  // The associated model
  commentId String?
  comment   Comment? @relation(fields: [commentId], references: [id])
  pageId    String?
  page      Page?    @relation(fields: [pageId], references: [id])
  postId    String?
  post      Post?    @relation(fields: [postId], references: [id])
}

model MessageThread {
  id String @id @default(cuid())

  // The pages in this message thread
  participants Page[]

  // All of the messages
  messages Message[]
}

model Message {
  id String @id @default(cuid())

  messageThread   MessageThread @relation(fields: [messageThreadId], references: [id])
  messageThreadId String

  // Who created this message
  page   Page   @relation(fields: [pageId], references: [id])
  pageId String

  // The text of the message
  body String
}
